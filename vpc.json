{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "AWS CloudFormation Sample Template VPC_AutoScaling_and_ElasticLoadBalancer. S3 bucket. Create file. Iam Role and RDS Instance",

  "Parameters" : {

    "CidrBlockVpc": {
      "Description" : "CIDR Block",
      "Type": "String",
      "Default" : "10.41.2.0/30",
      "MinLength": "9",
      "MaxLength": "18",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },

    "CidrBlockSubnet1": {
      "Description" : "CIDR Block",
      "Type": "String",
      "Default" : "10.41.2.0/30",
      "MinLength": "9",
      "MaxLength": "18",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },

    "CidrBlockSubnet2": {
      "Description" : "CIDR Block",
      "Type": "String",
      "Default" : "10.41.2.0/30",
      "MinLength": "9",
      "MaxLength": "18",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },

    "CidrIp": {
      "Description" : "CIDR Ip address for security group",
      "Type": "String",
      "Default" : "14.98.68.88/29",
      "MinLength": "7",
      "MaxLength": "15",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP address of the form x.x.x.x/x"
    },

    "InstanceCount" : {
      "Description" : "Number of EC2 instances to launch",
      "Type" : "Number",
      "Default" : "2"
    },

    "MaxInstanceCount" : {
      "Description" : "Number of EC2 instances to launch",
      "Type" : "Number",
      "Default" : "10"
    },

    "BucketName" : {
      "Description" : "Nsame of S3 Bucket",
      "Type" : "String",
      "Default" : "eiu-sre-labtest"
    },

    "DBName": {
      "Default": "MyDatabase",
      "Description" : "The database name",
      "Type": "String"
    },

    "DBUser": {
      "Description" : "The database admin account username",
      "Type": "String",
      "Default" : "user",
      "MinLength": "1",
      "MaxLength": "16",
      "AllowedPattern" : "[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription" : "must begin with a letter and contain only alphanumeric characters."
    },

    "DBPassword": {
      "NoEcho": "true",
      "Description" : "The database admin account password",
      "Type": "String",
      "Default" : "password",
      "MinLength": "8",
      "MaxLength": "41",
      "AllowedPattern" : "[a-zA-Z0-9]*",
      "ConstraintDescription" : "must contain only alphanumeric characters."
    },

    "DBAllocatedStorage": {
      "Description": "The size of the database (GiB)",
      "Type": "Number",
      "Default" : "5",
      "MinValue": "5",
      "MaxValue": "1024",
      "ConstraintDescription": "Size must be between 5 and 1024 GiB."
    },

    "DBInstanceClass": {
      "Description" : "DB Instance Class",
      "Type": "String",
      "Default" : "db.t2.small",
      "ConstraintDescription": "Must select a valid DB instance type."
    }
  },

  "Resources" : {

    "eiusrelabtestiamrole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": "*",
                            "Resource": "*"
                        }
                    ]
                },
                "Path": "/",
                "ManagedPolicyArns": [
                  {"Ref" : "arn:aws::IAM::AWSSupportAccess"},
                  {"Ref" : "arn:aws::IAM::ReadOnlyAccess"}
                ]
            }
        },

    "vpgeiusrelabtest" : {
      "Type" : "AWS::EC2::VPNGateway",
      "Properties" : {
        "Type" : "ipsec.1",
        "Tags" : [ {"Key" : "name", "Value" : "vpg-eiu-sre-labtest"} ]
        }
      },

    "igweiusrelabtest" : {
      "Type" : "AWS::EC2::InternetGateway",
      "Properties" : {
        "Tags" : [ {"Key" : "name", "Value" : "igw-eiu-sre-labtest"} ]
        }
    },

    "vpceiusrelabtest" : {
      "Type" : "AWS::EC2::VPC",
      "Properties" : {
        "CidrBlock": { "Ref" : "CidrBlockVpc" },
        "Tags" : [ {"Key" : "name", "Value" : "vpc-eiu-sre-labtest"} ]
      }
    },

    "AttachGateway" : {
      "Type" : "AWS::EC2::VPCGatewayAttachment",
      "Properties" : {
        "VpcId" : { "Ref" : "vpceiusrelabtest" },
        "InternetGatewayId" : { "Ref" : "igweiusrelabtest" }
      }
    },

    "AttachVpnGateway" : {
      "Type" : "AWS::EC2::VPCGatewayAttachment",
      "Properties" : {
        "VpcId" : { "Ref" : "vpceiusrelabtest" },
        "VpnGatewayId" : { "Ref" : "vpgeiusrelabtest" }
      }
      },

    "subnet" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "vpceiusrelabtest" },
        "CidrBlock" : { "Ref" : "CidrBlockSubnet1" }
      }
    },

    "subnet2" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "vpceiusrelabtest" },
        "CidrBlock" : { "Ref" : "CidrBlockSubnet2" }
      }
    },

    "rtbeiusrelabtest" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : { "Ref" : "vpceiusrelabtest" },
        "Tags" : [ {"Key" : "name", "Value" : "rtb-eiu-sre-labtest"} ]
      }
    },

    "scsrelabtestec2ssh" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Economist Gurgaon",
        "VpcId" : { "Ref" : "vpceiusrelabtest" },
        "SecurityGroupIngress": [
         {
            "IpProtocol": "tcp",
            "CidrIp": { "Ref" : "CidrIp"},
            "FromPort": 22,
            "ToPort": 22
         }
      ],
      "Tags" : [ {"Key" : "name", "Value" : "sc-sre-labtest-ec2-ssh"} ]
      }
    },

    "scsrelabtestrds" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Economist Gurgaon",
        "VpcId" : { "Ref" : "vpceiusrelabtest" },
        "SecurityGroupIngress": [
         {
            "IpProtocol": "tcp",
            "CidrIp": { "Ref" : "CidrIp"},
            "FromPort": 80,
            "ToPort": 80
         },
         {
            "IpProtocol": "tcp",
            "CidrIp": { "Ref" : "CidrIp"},
            "FromPort": 443,
            "ToPort": 443
         }
      ],
      "Tags" : [ {"Key" : "name", "Value" : "sc-sre-labtest-rds"} ]
      }
    },



    "WebServerGroup" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "VPCZoneIdentifier" : [{ "Ref" : "subnet" }],
        "LaunchConfigurationName" : { "Ref" : "LaunchConfig" },
        "MinSize" : 1,
        "MaxSize" : {"Ref" : "MaxInstanceCount"},
        "DesiredCapacity" : { "Ref" : "InstanceCount" },
        "TargetGroupARNs" : [ { "Ref" : "ALBTargetGroup" } ]
      },
      "CreationPolicy" : {
        "ResourceSignal" : {
          "Timeout" : "PT15M"
        }
      },
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MinInstancesInService": "1",
          "MaxBatchSize": "1",
          "PauseTime" : "PT15M",
          "WaitOnResourceSignals": "true"
        }
      }
    },

    "LaunchConfig" : {
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "Properties" : {
        "AssociatePublicIpAddress" : "true",
        "ImageId" : "ami-0ff8a91507f77f867",
        "SecurityGroups" : [ { "Ref" : "scsrelabtestec2ssh" } ],
        "InstanceType" : "t2.micro",
      }
    },

    "ApplicationLoadBalancer" : {
      "Type" : "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties" : {
        "Subnets" : [{ "Ref" : "subnet"},{ "Ref" : "subnet2"}],
        "SecurityGroups" : [ { "Ref" : "scsrelabtestec2ssh" } ]
      }
    },

    "ALBListener" : {
      "Type" : "AWS::ElasticLoadBalancingV2::Listener",
      "Properties" : {
        "DefaultActions" : [{
          "Type" : "forward",
          "TargetGroupArn" : { "Ref" : "ALBTargetGroup" }
        }],
        "LoadBalancerArn" : { "Ref" : "ApplicationLoadBalancer" },
        "Port" : "80",
        "Protocol" : "HTTP"
      }
    },

    "ALBTargetGroup" : {
      "Type" : "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties" : {
        "HealthCheckIntervalSeconds" : 30,
        "HealthCheckTimeoutSeconds" : 25,
        "HealthyThresholdCount" : 3,
        "Port" : 80,
        "Protocol" : "HTTP",
        "UnhealthyThresholdCount" : 5,
        "VpcId" : {"Ref" : "vpceiusrelabtest"}
      }
    },

    "S3Bucket" : {
        "Type" : "AWS::S3::Bucket",
        "Properties" : {
           "BucketName" : {"Ref": "BucketName"},
           "AccessControl" : "PublicRead"
         }
     },

     "S3PutObjectFunctionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version" : "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [ "lambda.amazonaws.com" ]
              },
              "Action": [ "sts:AssumeRole" ]
            }
          ]
        },
        "ManagedPolicyArns": [
          { "Ref": "RoleBasePolicy" }
        ],
        "Policies": [
          {
            "PolicyName": "S3Writer",
            "PolicyDocument": {
              "Version" : "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:DeleteObject",
                    "s3:ListBucket",
                    "s3:PutObject"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "S3PutObjectFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {"Ref": "BucketName"},
          "S3Key": "cloudformation-helpers.zip"
        },
        "Description": "Used to put objects into S3.",
        "Handler": "aws/s3.putObject",
        "Role": {"Fn::GetAtt" : [ "S3PutObjectFunctionRole", "Arn" ] },
        "Runtime": "nodejs4.3",
        "Timeout": 30
      },
      "DependsOn": [
        "S3PutObjectFunctionRole"
      ]
    },

    "S3PutObject1": {
      "Type": "Custom::S3PutObject",
      "Properties": {
        "ServiceToken": { "Fn::GetAtt" : ["S3PutObjectFunction", "Arn"] },
        "Bucket": { "Ref": "BucketName" },
        "Key": "labtest.txt",
        "ContentType" : "text/plain"
      },
      "DependsOn": [
        "CFHelper"
      ]
    },

     "DBSecurityGroup": {
      "Type": "AWS::RDS::DBSecurityGroup",
      "Properties": {
        "DBSecurityGroupIngress": {
          "EC2SecurityGroupName": { "Ref": "scsrelabtestrds" }
        },
        "GroupDescription": "Database Security"
      }
    },

     "RDS" : {
        "Type" : "AWS::RDS::DBInstance",
        "Properties" : {
          "DBSecurityGroups": [
                    {
                        "Ref": "DBSecurityGroup"
                    }
                ],
          "DBName" : { "Ref" : "DBName" },
          "AllocatedStorage" : { "Ref" : "DBAllocatedStorage" },
          "DBInstanceClass" : { "Ref" : "DBInstanceClass" },
          "Engine" : "MySQL",
          "MasterUsername" : { "Ref" : "DBUser" },
          "MasterUserPassword" : { "Ref" : "DBPassword" }
      }
    }
  },

  "Outputs" : {
    "JDBCConnectionString": {
      "Description" : "JDBC connection string for the database",
      "Value" : { "Fn::Join": [ "", [ "jdbc:mysql://",
                                      { "Fn::GetAtt": [ "RDS", "Endpoint.Address" ] },
                                      ":",
                                      { "Fn::GetAtt": [ "RDS", "Endpoint.Port" ] },
                                      "/",
                                      { "Ref": "DBName" }]]}
    },
    "DBName": {
      "Description" : "Database name",
      "Value" : { "Ref": "DBName" }
    }
  }


}
